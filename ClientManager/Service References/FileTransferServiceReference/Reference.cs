//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientManager.FileTransferServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileTransferServiceReference.IFileTransferService")]
    public interface IFileTransferService {
        
        // CODEGEN: Generating message contract since the operation SendFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/SendFile", ReplyAction="http://tempuri.org/IFileTransferService/SendFileResponse")]
        ClientManager.FileTransferServiceReference.SendFileResponse SendFile(ClientManager.FileTransferServiceReference.UkazFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/SendFile", ReplyAction="http://tempuri.org/IFileTransferService/SendFileResponse")]
        System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.SendFileResponse> SendFileAsync(ClientManager.FileTransferServiceReference.UkazFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/IsFileProcessed", ReplyAction="http://tempuri.org/IFileTransferService/IsFileProcessedResponse")]
        bool IsFileProcessed(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/IsFileProcessed", ReplyAction="http://tempuri.org/IFileTransferService/IsFileProcessedResponse")]
        System.Threading.Tasks.Task<bool> IsFileProcessedAsync(string fileName);
        
        // CODEGEN: Generating message contract since the wrapper name (UkazFileInfo) of message UkazFileInfo does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferService/DownloadFileResponse")]
        ClientManager.FileTransferServiceReference.UkazFileInfo DownloadFile(ClientManager.FileTransferServiceReference.UkazFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferService/DownloadFileResponse")]
        System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.UkazFileInfo> DownloadFileAsync(ClientManager.FileTransferServiceReference.UkazFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/IsValidPassword", ReplyAction="http://tempuri.org/IFileTransferService/IsValidPasswordResponse")]
        bool IsValidPassword(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/IsValidPassword", ReplyAction="http://tempuri.org/IFileTransferService/IsValidPasswordResponse")]
        System.Threading.Tasks.Task<bool> IsValidPasswordAsync(string password);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UkazFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UkazFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileMovePath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public UkazFileInfo() {
        }
        
        public UkazFileInfo(string FileMovePath, string FileName, long Length, string Password, System.IO.Stream FileByteStream) {
            this.FileMovePath = FileMovePath;
            this.FileName = FileName;
            this.Length = Length;
            this.Password = Password;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SendFileResponse {
        
        public SendFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceChannel : ClientManager.FileTransferServiceReference.IFileTransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferServiceClient : System.ServiceModel.ClientBase<ClientManager.FileTransferServiceReference.IFileTransferService>, ClientManager.FileTransferServiceReference.IFileTransferService {
        
        public FileTransferServiceClient() {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientManager.FileTransferServiceReference.SendFileResponse ClientManager.FileTransferServiceReference.IFileTransferService.SendFile(ClientManager.FileTransferServiceReference.UkazFileInfo request) {
            return base.Channel.SendFile(request);
        }
        
        public void SendFile(string FileMovePath, string FileName, long Length, string Password, System.IO.Stream FileByteStream) {
            ClientManager.FileTransferServiceReference.UkazFileInfo inValue = new ClientManager.FileTransferServiceReference.UkazFileInfo();
            inValue.FileMovePath = FileMovePath;
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Password = Password;
            inValue.FileByteStream = FileByteStream;
            ClientManager.FileTransferServiceReference.SendFileResponse retVal = ((ClientManager.FileTransferServiceReference.IFileTransferService)(this)).SendFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.SendFileResponse> ClientManager.FileTransferServiceReference.IFileTransferService.SendFileAsync(ClientManager.FileTransferServiceReference.UkazFileInfo request) {
            return base.Channel.SendFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.SendFileResponse> SendFileAsync(string FileMovePath, string FileName, long Length, string Password, System.IO.Stream FileByteStream) {
            ClientManager.FileTransferServiceReference.UkazFileInfo inValue = new ClientManager.FileTransferServiceReference.UkazFileInfo();
            inValue.FileMovePath = FileMovePath;
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Password = Password;
            inValue.FileByteStream = FileByteStream;
            return ((ClientManager.FileTransferServiceReference.IFileTransferService)(this)).SendFileAsync(inValue);
        }
        
        public bool IsFileProcessed(string fileName) {
            return base.Channel.IsFileProcessed(fileName);
        }
        
        public System.Threading.Tasks.Task<bool> IsFileProcessedAsync(string fileName) {
            return base.Channel.IsFileProcessedAsync(fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientManager.FileTransferServiceReference.UkazFileInfo ClientManager.FileTransferServiceReference.IFileTransferService.DownloadFile(ClientManager.FileTransferServiceReference.UkazFileInfo request) {
            return base.Channel.DownloadFile(request);
        }
        
        public void DownloadFile(ref string FileMovePath, ref string FileName, ref long Length, ref string Password, ref System.IO.Stream FileByteStream) {
            ClientManager.FileTransferServiceReference.UkazFileInfo inValue = new ClientManager.FileTransferServiceReference.UkazFileInfo();
            inValue.FileMovePath = FileMovePath;
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Password = Password;
            inValue.FileByteStream = FileByteStream;
            ClientManager.FileTransferServiceReference.UkazFileInfo retVal = ((ClientManager.FileTransferServiceReference.IFileTransferService)(this)).DownloadFile(inValue);
            FileMovePath = retVal.FileMovePath;
            FileName = retVal.FileName;
            Length = retVal.Length;
            Password = retVal.Password;
            FileByteStream = retVal.FileByteStream;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.UkazFileInfo> ClientManager.FileTransferServiceReference.IFileTransferService.DownloadFileAsync(ClientManager.FileTransferServiceReference.UkazFileInfo request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ClientManager.FileTransferServiceReference.UkazFileInfo> DownloadFileAsync(string FileMovePath, string FileName, long Length, string Password, System.IO.Stream FileByteStream) {
            ClientManager.FileTransferServiceReference.UkazFileInfo inValue = new ClientManager.FileTransferServiceReference.UkazFileInfo();
            inValue.FileMovePath = FileMovePath;
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.Password = Password;
            inValue.FileByteStream = FileByteStream;
            return ((ClientManager.FileTransferServiceReference.IFileTransferService)(this)).DownloadFileAsync(inValue);
        }
        
        public bool IsValidPassword(string password) {
            return base.Channel.IsValidPassword(password);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidPasswordAsync(string password) {
            return base.Channel.IsValidPasswordAsync(password);
        }
    }
}
